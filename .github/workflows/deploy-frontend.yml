name: Deploy Frontend

on:
  push:
    branches:
      - stag
      - main  # Use 'main' for production
    paths:
      - "frontend/**"

env:
  AWS_REGION: "us-east-1"
  
  # Staging Environment Variables
  STAGING_LAMBDA_NAME: "tasks-lambda-staging"
  STAGING_S3_BUCKET: "tf-infra-aws-stag"
  STAGING_ZIP: "app_lambda_stag.zip"
  STAGING_CLOUDFRONT_ID: "your-cloudfront-staging-id"

  # Production Environment Variables
  PROD_LAMBDA_NAME: "tasks-lambda-prod"
  PROD_S3_BUCKET: "tf-infra-aws-prod"
  PROD_ZIP: "app_lambda_prod.zip"
  PROD_CLOUDFRONT_ID: "your-cloudfront-prod-id"

jobs:
  deploy-frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Determine Environment
        run: |
          if [[ "${{ github.ref_name }}" == "stag" ]]; then
            echo "S3_BUCKET=$STAGING_S3_BUCKET" >> $GITHUB_ENV
            echo "CLOUDFRONT_ID=$STAGING_CLOUDFRONT_ID" >> $GITHUB_ENV
          else
            echo "S3_BUCKET=$PROD_S3_BUCKET" >> $GITHUB_ENV
            echo "CLOUDFRONT_ID=$PROD_CLOUDFRONT_ID" >> $GITHUB_ENV
          fi

      - name: Sync Frontend Files to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 sync frontend/ s3://$S3_BUCKET/ --delete

      - name: Invalidate CloudFront Cache
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws cloudfront create-invalidation \
            --distribution-id $CLOUDFRONT_ID \
            --paths "/*"

  deploy-lambda:
    runs-on: ubuntu-latest
    needs: deploy-frontend  # Ensure frontend deploys first

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Determine Environment
        run: |
          if [[ "${{ github.ref_name }}" == "stag" ]]; then
            echo "LAMBDA_FUNCTION_NAME=$STAGING_LAMBDA_NAME" >> $GITHUB_ENV
            echo "S3_BUCKET=$STAGING_S3_BUCKET" >> $GITHUB_ENV
            echo "ZIP_NAME=$STAGING_ZIP" >> $GITHUB_ENV
          else
            echo "LAMBDA_FUNCTION_NAME=$PROD_LAMBDA_NAME" >> $GITHUB_ENV
            echo "S3_BUCKET=$PROD_S3_BUCKET" >> $GITHUB_ENV
            echo "ZIP_NAME=$PROD_ZIP" >> $GITHUB_ENV
          fi

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.9"

      - name: Install Dependencies & Package Lambda
        run: |
          pip install -r lambda/requirements.txt -t lambda/app/
          cd lambda/app && zip -r ../lambda.zip .

      - name: Upload Lambda to S3
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws s3 cp lambda/lambda.zip s3://$S3_BUCKET/$ZIP_NAME

      - name: Deploy Lambda
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        run: |
          aws lambda update-function-code \
            --function-name $LAMBDA_FUNCTION_NAME \
            --s3-bucket $S3_BUCKET \
            --s3-key $ZIP_NAME
